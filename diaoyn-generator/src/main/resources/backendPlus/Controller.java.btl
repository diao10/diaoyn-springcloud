package ${packageName}.controller;

import cn.hutool.core.bean.BeanUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.diaoyn.ValidGroup;
import ${packageName}.entity.${className};
import ${packageName}.service.${className}Service;
import ${packageName}.vo.${className}Vo;
<% if(swagger) { %>
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
<% } else if(springdoc) { %>
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
<% } %>
import jakarta.annotation.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import java.io.Serializable;
import java.util.List;

/**
 * ${tableComment}(${className})Controller控制层
 *
 * @author ${authorName}
 * @Date ${createTime}
 */

<% if(swagger) { %>
@Api(tags = "${tableComment}")
<% } else if(springdoc) { %>
@Tag(name = "${tableComment}")
<% } %>
@Validated
@RestController
@RequestMapping("/${bizName}")
public class ${className}Controller {

    /**
     * 服务对象
     */
    @Resource
    private ${className}Service ${classNameCamelCase}Service;

    /**
     * 分页查询所有${tableComment}
     *
     * @param pageNo   页数
     * @param pageSize 条数
     * @return 所有${tableComment}
     */
    <% if(swagger) { %>
    @ApiOperation("分页查询所有${tableComment}")
    <% } else if(springdoc) { %>
    @Operation(summary = "分页查询所有${tableComment}")
    <% } %>
    @GetMapping("/page")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNo", value = "页数", example = "1", dataType = "int", required = true),
            @ApiImplicitParam(name = "pageSize", value = "条数", example = "20", dataType = "int", required = true)
    })
    public ResponseEntity<Page<${className}>> page(@RequestParam(name = "pageNo", defaultValue = "1") Integer pageNo,
                                                      @RequestParam(name = "pageSize", defaultValue = "20") Integer pageSize) {
        LambdaQueryWrapper<${className}> queryWrapper = new LambdaQueryWrapper<>();
        <% for(item in configList) { %>
        <% if(item.isAutoInsert && item.fieldJavaType == 'Date') { %>
        queryWrapper.orderByDesc(${className}::getCreateTime);
        <% } %>
        <% } %>
        return ResponseEntity.ok(${classNameCamelCase}Service.page(new Page<>(pageNo, pageSize), queryWrapper));
    }

    /**
     * 查询所有${tableComment}
     *
     * @return 所有${tableComment}
     */
    <% if(swagger) { %>
    @ApiOperation("查询所有${tableComment}")
    <% } else if(springdoc) { %>
    @Operation(summary = "查询所有${tableComment}")
    <% } %>
    @GetMapping
    public ResponseEntity<List<${className}>> list() {
        return ResponseEntity.ok(${classNameCamelCase}Service.list());
    }

    /**
     * 通过${tableComment}主键查询单条数据
     *
     * @param id ${tableComment}主键
     * @return 单条数据
     */
    <% if(swagger) { %>
    @ApiOperation("通过主键查询单条${tableComment}")
    <% } else if(springdoc) { %>
    @Operation(summary = "通过主键查询单条${tableComment}")
    <% } %>
    @GetMapping("/{id}")
    @ApiImplicitParam(name = "id", value = "主键id", example = "1", dataType = "string", required = true)
    public ResponseEntity<${className}> getById(@PathVariable Serializable id) {
        return ResponseEntity.ok(${classNameCamelCase}Service.getById(id));
    }

    /**
     * 新增${tableComment}
     *
     * @param vo 请求对象
     * @return 新增结果
     */
    <% if(swagger) { %>
    @ApiOperation("新增${tableComment}")
    <% } else if(springdoc) { %>
    @Operation(summary = "新增${tableComment}")
    <% } %>
    @PostMapping
    public ResponseEntity<Void> save(@RequestBody ${className}Vo vo) {
        ${className} ${classNameCamelCase} = new ${className}();
        BeanUtil.copyProperties(vo, ${classNameCamelCase});
        ${classNameCamelCase}Service.save(${classNameCamelCase});
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
      * 修改${tableComment}
      *
      * @param vo 请求对象
      * @return 修改结果
      */
    <% if(swagger) { %>
    @ApiOperation("修改${tableComment}")
    <% } else if(springdoc) { %>
    @Operation(summary = "修改${tableComment}")
    <% } %>
    @PutMapping
    public ResponseEntity<Void> updateById(@Validated(value = ValidGroup.Update.class) @RequestBody ${className}Vo vo) {
        ${className} ${classNameCamelCase} = new ${className}();
        BeanUtil.copyProperties(vo, ${classNameCamelCase});
        ${classNameCamelCase}Service.updateById(${classNameCamelCase});
        return new ResponseEntity<>(HttpStatus.OK);
    }
  
    /**
     * 删除${tableComment}
     *
     * @param ids ${tableComment}主键结合
     * @return 删除结果
     */
    <% if(swagger) { %>
    @ApiOperation("删除${tableComment}")
    <% } else if(springdoc) { %>
    @Operation(summary = "删除${tableComment}")
    <% } %>
    @DeleteMapping
    @ApiImplicitParam(name = "ids", value = "${tableComment}主键id集合", example = "2,3", dataType = "array", required = true)
    public ResponseEntity<Void> delete(@RequestParam("ids") List<String> ids) {
        ${classNameCamelCase}Service.removeByIds(ids);
        return new ResponseEntity<>(HttpStatus.OK);
    }

}
